/*
 * This source code has been generated by blanco Framework.
 */
package dapanda.api.sample.blanco

import blanco.restgenerator.valueobject.HttpCommonRequest
import dapanda.api.sample.application.SampleArrayPayloadTestManagement
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpResponse
import io.micronaut.http.annotation.Body
import io.micronaut.http.annotation.Controller
import io.micronaut.http.annotation.Get
import io.micronaut.http.annotation.PathVariable
import io.micronaut.http.annotation.Post
import io.micronaut.http.annotation.Put
import io.micronaut.http.annotation.QueryValue
import java.util.Optional

/** Methodテスト用API&lt;br&gt; */
@Controller("/sample_array")
class SampleArrayPayloadTestController
constructor(
    /** The implementation class to be called by SampleArrayPayloadTestController. */
    var sampleArrayPayloadTestManagement: SampleArrayPayloadTestManagement
) {
  /**
   * APIベースクラスから呼ばれる実行メソッドです
   *
   * @param argHttpRequest validation前のリクエスト情報です
   * @param argUserId ユーザーID
   * @param argPassword パスワード
   * @return validation済みのレスポンス情報です
   */
  @Get("/{userId}{?password}")
  fun doGet(
      argHttpRequest: HttpRequest<*>,
      @PathVariable("userId") argUserId: String,
      @QueryValue("password") argPassword: Optional<String>
  ): HttpResponse<List<SampleArrayPayloadTestGetResponse>> {
    val requestBean =
        dapanda.api.sample.blanco.SampleArrayPayloadTestGetRequest(
            userId = argUserId,
            password = if (argPassword.isPresent == true) argPassword.get() else "")

    @Suppress("UNCHECKED_CAST")
    val typedHttpRequest =
        argHttpRequest as HttpRequest<dapanda.api.sample.blanco.SampleArrayPayloadTestGetRequest>
    val httpCommonRequest = HttpCommonRequest(typedHttpRequest, true, listOf(), null)

    /* Stores the RequestBean with its type determined */
    httpCommonRequest.commonRequest = requestBean

    /* Performs preprocessing (validation, etc.) */
    sampleArrayPayloadTestManagement.prepare(httpCommonRequest)

    /* Passes HttpCommonRequest */
    val httpResponse = sampleArrayPayloadTestManagement.doGet(httpCommonRequest)

    /* Postprocessing */
    sampleArrayPayloadTestManagement.finishArray(httpResponse, httpCommonRequest)

    return httpResponse
  }

  /**
   * APIベースクラスから呼ばれる実行メソッドです
   *
   * @param argHttpRequest validation前のリクエスト情報です
   * @param argUserId ユーザーID
   * @param argRequestBean bean that body json is binded to
   * @return validation済みのレスポンス情報です
   */
  @Post("/{userId}")
  fun doPost(
      argHttpRequest: HttpRequest<*>,
      @PathVariable("userId") argUserId: String,
      @Body argRequestBean: List<SampleArrayPayloadTestPostRequestBody>
  ): HttpResponse<List<SampleArrayPayloadTestPostResponse>> {
    val requestBean =
        dapanda.api.sample.blanco.SampleArrayPayloadTestPostRequest(
            userId = argUserId, argBody = argRequestBean)

    @Suppress("UNCHECKED_CAST")
    val typedHttpRequest =
        argHttpRequest as HttpRequest<dapanda.api.sample.blanco.SampleArrayPayloadTestPostRequest>
    val httpCommonRequest = HttpCommonRequest(typedHttpRequest, true, listOf(), null)

    /* Stores the RequestBean with its type determined */
    httpCommonRequest.commonRequest = requestBean

    /* Performs preprocessing (validation, etc.) */
    sampleArrayPayloadTestManagement.prepare(httpCommonRequest)

    /* Passes HttpCommonRequest */
    val httpResponse = sampleArrayPayloadTestManagement.doPost(httpCommonRequest)

    /* Postprocessing */
    sampleArrayPayloadTestManagement.finishArray(httpResponse, httpCommonRequest)

    return httpResponse
  }

  /**
   * APIベースクラスから呼ばれる実行メソッドです
   *
   * @param argHttpRequest validation前のリクエスト情報です
   * @param argUserId ユーザーID
   * @param argRequestBean bean that body json is binded to
   * @return validation済みのレスポンス情報です
   */
  @Put("/{userId}")
  fun doPut(
      argHttpRequest: HttpRequest<*>,
      @PathVariable("userId") argUserId: String,
      @Body argRequestBean: Optional<List<SampleArrayPayloadTestPutRequestBody>>
  ): HttpResponse<List<SampleArrayPayloadTestPutResponse>> {
    val requestBean =
        dapanda.api.sample.blanco.SampleArrayPayloadTestPutRequest(
            userId = argUserId,
            argBody = if (argRequestBean.isPresent == true) argRequestBean.get() else null)

    @Suppress("UNCHECKED_CAST")
    val typedHttpRequest =
        argHttpRequest as HttpRequest<dapanda.api.sample.blanco.SampleArrayPayloadTestPutRequest>
    val httpCommonRequest = HttpCommonRequest(typedHttpRequest, true, listOf(), null)

    /* Stores the RequestBean with its type determined */
    httpCommonRequest.commonRequest = requestBean

    /* Performs preprocessing (validation, etc.) */
    sampleArrayPayloadTestManagement.prepare(httpCommonRequest)

    /* Passes HttpCommonRequest */
    val httpResponse = sampleArrayPayloadTestManagement.doPut(httpCommonRequest)

    /* Postprocessing */
    sampleArrayPayloadTestManagement.finishArray(httpResponse, httpCommonRequest)

    return httpResponse
  }
}
