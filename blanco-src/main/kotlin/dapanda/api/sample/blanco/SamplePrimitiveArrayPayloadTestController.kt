/*
 * This source code has been generated by blanco Framework.
 */
package dapanda.api.sample.blanco

import blanco.restgenerator.valueobject.HttpCommonRequest
import blanco.restgenerator.valueobject.HttpPrimitiveRequest
import dapanda.api.sample.application.SamplePrimitiveArrayPayloadTestManagement
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpResponse
import io.micronaut.http.annotation.Body
import io.micronaut.http.annotation.Controller
import io.micronaut.http.annotation.Get
import io.micronaut.http.annotation.PathVariable
import io.micronaut.http.annotation.Post
import io.micronaut.http.annotation.QueryValue
import java.util.Optional

/** primitiveArrayPayloadテスト用API&lt;br&gt; */
@Controller("/sample_primitive")
class SamplePrimitiveArrayPayloadTestController
constructor(
    /** The implementation class to be called by SamplePrimitiveArrayPayloadTestController. */
    var samplePrimitiveArrayPayloadTestManagement: SamplePrimitiveArrayPayloadTestManagement
) {
  /**
   * APIベースクラスから呼ばれる実行メソッドです
   *
   * @param argHttpRequest validation前のリクエスト情報です
   * @param argUserId ユーザーID
   * @param argPassword パスワード
   * @return validation済みのレスポンス情報です
   */
  @Get("/{userId}{?password}")
  fun doGet(
      argHttpRequest: HttpRequest<*>,
      @PathVariable("userId") argUserId: String,
      @QueryValue("password") argPassword: Optional<String>
  ): HttpResponse<List<String>> {
    val requestBean =
        dapanda.api.sample.blanco.SamplePrimitiveArrayPayloadTestGetRequest(
            userId = argUserId,
            password = if (argPassword.isPresent == true) argPassword.get() else "")

    @Suppress("UNCHECKED_CAST")
    val typedHttpRequest =
        argHttpRequest
            as HttpRequest<dapanda.api.sample.blanco.SamplePrimitiveArrayPayloadTestGetRequest>
    val httpCommonRequest = HttpCommonRequest(typedHttpRequest, true, listOf(), null)

    /* Stores the RequestBean with its type determined */
    httpCommonRequest.commonRequest = requestBean

    /* Performs preprocessing (validation, etc.) */
    samplePrimitiveArrayPayloadTestManagement.prepare(httpCommonRequest)

    /* Passes HttpCommonRequest */
    val httpResponse = samplePrimitiveArrayPayloadTestManagement.doGet(httpCommonRequest)

    /* Postprocessing */
    samplePrimitiveArrayPayloadTestManagement.finishPrimitiveArray(httpResponse, httpCommonRequest)

    return httpResponse
  }

  /**
   * APIベースクラスから呼ばれる実行メソッドです
   *
   * @param argHttpRequest validation前のリクエスト情報です
   * @param argUserId ユーザーID
   * @param argPassword パスワード
   * @return validation済みのレスポンス情報です
   */
  @Post("/{userId}/{password}")
  fun doPost(
      argHttpRequest: HttpRequest<*>,
      @PathVariable("userId") argUserId: String,
      @PathVariable("password") argPassword: String,
      @Body argRequestBody: List<String>
  ): HttpResponse<List<String>> {
    val requestBean =
        dapanda.api.sample.blanco.SamplePrimitiveArrayPayloadTestPostRequest(
            userId = argUserId, password = argPassword)

    @Suppress("UNCHECKED_CAST")
    val typedHttpRequest =
        argHttpRequest
            as HttpRequest<dapanda.api.sample.blanco.SamplePrimitiveArrayPayloadTestPostRequest>
    val httpCommonRequest = HttpCommonRequest(typedHttpRequest, true, listOf(), null)
    val httpPrimitiveRequest = HttpPrimitiveRequest(typedHttpRequest, true, listOf(), null, argRequestBody)

    /* Stores the RequestBean with its type determined */
    httpCommonRequest.commonRequest = requestBean
    httpPrimitiveRequest.commonRequest = requestBean

    /* Performs preprocessing (validation, etc.) */
    samplePrimitiveArrayPayloadTestManagement.prepare(httpCommonRequest)

    /* Passes HttpCommonRequest */
    val httpResponse = samplePrimitiveArrayPayloadTestManagement.doPost(httpPrimitiveRequest)

    /* Postprocessing */
    samplePrimitiveArrayPayloadTestManagement.finishPrimitiveArray(httpResponse, httpPrimitiveRequest)

    return httpResponse
  }
}
