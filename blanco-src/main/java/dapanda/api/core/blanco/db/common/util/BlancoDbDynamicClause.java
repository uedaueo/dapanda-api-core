/*
 * This code is generated by blanco Framework.
 */
package dapanda.api.core.blanco.db.common.util;

import java.util.List;

/**
 * A class that defines a dynamic conditional clause.
 * This class is used in the source code generated by blancoDb.<br>
 * This class is used from the source code generated by blancoDb. It is not recommended to call it directly.
 * @since 2020.09.01
 * @author blanco Framework
 */
public class BlancoDbDynamicClause {
    /**
     * tag name
     */
    private String tag = null;

    /**
     * conditional clause type
     */
    private String condition = null;

    /**
     * target Items
     */
    private List<String> items = null;

    /**
     * comparison operator
     */
    private String comparison = null;

    /**
     * logical operator (leading)
     */
    private String logical = null;

    /**
     * type of value
     */
    private String type = null;

    /**
     * constructor
     */
    public BlancoDbDynamicClause() {
    }

    /**
     * constructor
     *
     * @param argTag tag name
     * @param argCondition conditional clause type
     * @param argItem target Item
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition, final String argItem) {
        this.tag = argTag;
        this.condition = argCondition;
        this.items = this.parseItems(argItem);
    }

    /**
     * constructor
     *
     * @param argTag tag name
     * @param argCondition conditional clause type
     * @param argItem target Item
     * @param argLogical logical operator (leading)
     * @param argType type of value
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition, final String argItem, final String argLogical, final String argType) {
        this.tag = argTag;
        this.condition = argCondition;
        this.items = this.parseItems(argItem);
        this.logical = argLogical;
        this.type = argType;
    }

    /**
     * constructor
     *
     * @param argTag tag name
     * @param argCondition conditional clause type
     * @param argItem target Item
     * @param argLogical logical operator (leading)
     * @param argType type of value
     * @param argComparison comparison operator
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition, final String argItem, final String argLogical, final String argType, final String argComparison) {
        this.tag = argTag;
        this.condition = argCondition;
        this.items = this.parseItems(argItem);
        this.logical = argLogical;
        this.type = argType;
        this.comparison = argComparison;
    }

    /**
     * constructor
     *
     * @param argTag tag name
     * @param argCondition conditional clause type
     * @param argItem target Item
     * @param argRawItem If true, it will not parse the taget Item as comma-separated.
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition, final String argItem, final Boolean argRawItem) {
        this.tag = argTag;
        this.condition = argCondition;
        this.items = this.parseItems(argItem);
        if (argRawItem) {
            this.items = new java.util.ArrayList<>();
            items.add(argItem);
        } else {
            this.items = this.parseItems(argItem);
        }
    }

    /**
     * tag name
     *
     * @param argTag tag name
     */
    public void setTag(final String argTag) {
        this.tag = argTag;
    }

    /**
     * tag name
     *
     * @return tag name
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * conditional clause type
     *
     * @param argCondition conditional clause type
     */
    public void setCondition(final String argCondition) {
        this.condition = argCondition;
    }

    /**
     * conditional clause type
     *
     * @return conditional clause type
     */
    public String getCondition() {
        return this.condition;
    }

    /**
     * target Item
     *
     * @param argItems target Item
     */
    public void setItems(final List<String> argItems) {
        this.items = argItems;
    }

    /**
     * target Item
     *
     * @return target Item
     */
    public List<String> getItems() {
        return this.items;
    }

    /**
     * comparison operator
     *
     * @param argComparison comparison operator
     */
    public void setComparison(final String argComparison) {
        this.comparison = argComparison;
    }

    /**
     * comparison operator
     *
     * @return comparison operator
     */
    public String getComparison() {
        return this.comparison;
    }

    /**
     * logical operator (leading)
     *
     * @param argLogical logical operator (leading)
     */
    public void setLogical(final String argLogical) {
        this.logical = argLogical;
    }

    /**
     * logical operator (leading)
     *
     * @return logical operator (leading)
     */
    public String getLogical() {
        return this.logical;
    }

    /**
     * type of value
     *
     * @param argType type of value
     */
    public void setType(final String argType) {
        this.type = argType;
    }

    /**
     * type of value
     *
     * @return type of value
     */
    public String getType() {
        return this.type;
    }

    /**
     * Submits a comma-separated list of target item to the list of strings.
     *
     * @param argItem A comma-separated list of items entered in the target items.
     * @return A list of item.
     */
    public List<String> parseItems(final String argItem) {
        java.util.List<java.lang.String> items = new java.util.ArrayList<>();
        if (argItem != null && argItem.length() > 0) {
            java.lang.String [] itemArray = argItem.split(",");
            for (int i = 0; i < itemArray.length; i++) {
                items.add(itemArray[i].trim());
            }
        }
        return items;
    }

    /**
     * Selects an item from a group of predefined items.
     *
     * @param argKey The item that was entered.
     * @return If the specified item does not exist, null is returned.
     */
    public String getItem(final String argKey) {
        String item = null;
        for (String defined : this.items) {
            if (defined.equals(argKey)) {
                item = defined;
                break;
            }
        }
        return item;
    }
}
