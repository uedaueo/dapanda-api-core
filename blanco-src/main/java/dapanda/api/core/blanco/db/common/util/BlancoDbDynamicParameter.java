/*
 * This code is generated by blanco Framework.
 */
package dapanda.api.core.blanco.db.common.util;

import java.util.List;

/**
 * A class that defines for dynamic conditional clauses.
 * This class is used in the source code generated by blancoDb.<br>
 * @since 2020.09.04
 * @author blanco Framework
 */
public class BlancoDbDynamicParameter<T> {
    /**
     * A key to refer to DynamicClause
     */
    private String key;

    /**
     * A logical operator used in connection when repeats COMPARE dynamic conditional clause types
     */
    private String logicalOperator = "OR";

    /**
     * A value to apply to the placeholder of PreparedStatement
     */
    private List<T> values;

    /**
     * A key to refer to DynamicClause
     *
     * @param argKey A key to refer to DynamicClause
     */
    public void setKey(final String argKey) {
        this.key = argKey;
    }

    /**
     * A key to refer to DynamicClause
     *
     * @return A key to refer to DynamicClause
     */
    public String getKey() {
        return this.key;
    }

    /**
     * A logical operator used in connection when repeats COMPARE dynamic conditional clause types
     *
     * @param argLogicalOperator A logical operator used in connection when repeats COMPARE dynamic conditional clause types
     */
    public void setLogicalOperator(final String argLogicalOperator) {
        this.logicalOperator = argLogicalOperator;
    }

    /**
     * A logical operator used in connection when repeats COMPARE dynamic conditional clause types
     *
     * @return A logical operator used in connection when repeats COMPARE dynamic conditional clause types
     */
    public String getLogicalOperator() {
        return this.logicalOperator;
    }

    /**
     * A value to apply to the placeholder of PreparedStatement
     *
     * @param argValues A value to apply to the placeholder of PreparedStatement
     */
    public void setValues(final List<T> argValues) {
        this.values = argValues;
    }

    /**
     * A value to apply to the placeholder of PreparedStatement
     *
     * @return A value to apply to the placeholder of PreparedStatement
     */
    public List<T> getValues() {
        return this.values;
    }
}
