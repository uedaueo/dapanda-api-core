import groovy.io.FileType
import org.jetbrains.gradle.ext.EncodingConfiguration

plugins {
    id "application"
    // ライブラリ化用
    id "java-library"
    id "maven-publish"
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.kapt") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.3.2"
    // IntelliJ IDEA の設定用
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.4"
    // Github pages に maven repository を push するために使用
    id "org.ajoberstar.grgit" version "4.1.1"
    // version の自動採番に使用
    id "com.palantir.git-version" version "0.15.0"
}

/*
 * <最新の tag>-<最新のcommit id> がバージョン番号になります。
 * 最新のtagが最新のcommitに点いている場合はtag名のみがバージョン番号となります（この状態でリリースする事！）
 * tag が無い場合は commit id が使用されます。
 * 未commitの場合は .dirty が付与されます。
 */
version = getVersion()
// プロジェクトグループ
group project.name.replace("-", ".")
// group = "emulator"

apply from: "local.gradle"

repositories {
    mavenLocal()
    maven {
        url 'https://raw.github.com/uedaueo/blancofw-maven2/gh-pages-poi5/'
    }
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs += "blanco-src/main/java"
        }
        kotlin {
            srcDirs += "blanco-src/main/kotlin"
        }
        resources {
            srcDirs += "blanco-src/main/java"
        }
    }
}

test {
    useJUnitPlatform()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("dapanda.api.*")
    }
}

// アプリケーションのメインクラス
//mainClassName = "dapanda.api.common.application.Application"

// ローカル実行用設定
run {
    classpath += configurations.developmentOnly
    jvmArgs(
            "-noverify",
            "-XX:TieredStopAtLevel=1",
            "-Dcom.sun.management.jmxremote",
            // デフォルト言語を設定
            "-Duser.language=ja",
            // デフォルトタイムゾーンを設定
            "-Duser.timezone=Asia/Tokyo",
            // スレッド名に Coroutine 名を追加するなど、Coroutine に関するログ出力を強化する
            "-Dkotlinx.coroutines.debug",
            // assert 関数を有効化（デバッグ支援用。本番環境では無効化する。）
            "-ea"
    )
    if (project.hasProperty("jvmArgs")) {
        // 以下のように実行すると、実行パラメータをコマンドラインで指定できる。
        // gradlew run -PjvmArgs="-Ddb.host=192.168.1.1 -Ddb.port=33360"
        jvmArgs(project.jvmArgs.split(/\s+/))
    }
}

configurations {
    blancoDb
    blancoRestGeneratorKt
    blancoFramework
}

dependencies {
    kapt('io.micronaut:micronaut-http-validation')
    kapt('io.micronaut:micronaut-inject-java')
    implementation('io.micronaut:micronaut-http-server-netty')
    implementation('io.micronaut:micronaut-http-client')
    implementation('io.micronaut:micronaut-runtime')
    implementation('io.micronaut.kotlin:micronaut-kotlin-runtime')
    implementation('javax.annotation:javax.annotation-api')
    // Micronaut Validation
    implementation('io.micronaut:micronaut-validation')
    // Required on using MessageInterpolator with validation
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation "io.micronaut.sql:micronaut-jdbc-hikari"
    // Micronaut Micrometer (watch metrics) integration
    implementation "io.micronaut.micrometer:micronaut-micrometer-core"
    // Micronaut Cache
    implementation "io.micronaut.cache:micronaut-cache-caffeine"
    // Micronaut Cache NoOp
    implementation "io.micronaut.cache:micronaut-cache-noop"
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    // logging
    runtimeOnly('ch.qos.logback:logback-classic:1.4.0')

    compileOnly('org.graalvm.nativeimage:svm')
    runtimeOnly('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'

    blancoDb "mysql:mysql-connector-java:${mysqlJdbcVersion}"
    blancoDb "blanco.db:blanco-db:[2.0,3.0)"
    blancoFramework "blanco.valueobjectkt:blanco-valueobjectkt:[0.0,1.0)"
    blancoRestGeneratorKt "blanco.restgeneratorkt:blanco-restgeneratorkt:[0.0,1.0)"
    blancoFramework "blanco.resourcebundle:blanco-resourcebundle:[2.0,3.0)"

    implementation "mysql:mysql-connector-java:${mysqlJdbcVersion}"

// https://mvnrepository.com/artifact/io.ktor/ktor-client-core
    runtimeOnly group: 'io.ktor', name: 'ktor-client-core', version: '2.1.0'
// https://mvnrepository.com/artifact/io.ktor/ktor-client-cio
    implementation group: 'io.ktor', name: 'ktor-client-cio', version: '2.1.0'

// https://mvnrepository.com/artifact/io.kotest/kotest-runner-junit5-jvm
    testImplementation group: 'io.kotest', name: 'kotest-runner-junit5-jvm', version: '5.4.2'
}


application {
    mainClass.set("dapanda.api.common.application.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

javadoc {
    options.charSet = "UTF-8"
    options.encoding = "UTF-8"
}

// 依存ライブラリを除くクラスを格納した jar を生成
jar {
    enabled = true
}

// アプリケーション起動用スクリプトを生成
startScripts {
    enabled = false
}

// 配布用 tar ファイルを生成
distTar {
    enabled = false
}

// 配布用 zip ファイルを生成
distZip {
    enabled = false
}

// IntelliJ IDEA の設定
idea {
    project {
        settings {
            // File -> Settings...(Ctrl + Alt + S) -> Editor -> File Encodings の設定
            encodings {
                // Project Encoding
                encoding = "UTF-8"
                // BOM for new UTF-8 files -> Create new UTF-8 files
                bomPolicy = EncodingConfiguration.BomPolicy.WITH_NO_BOM
                // Properties Files (*.properties)
                properties {
                    // Default encoding for properties files
                    encoding = "UTF-8"
                    // Transparent native-to-ascii conversion
                    transparentNativeToAsciiConversion = true
                    // ファイルまたは、ディレクトリを指定してエンコーディングを設定
                    // ファイル指定の場合は、プロジェクトルートからの相対指定で、ディレクトリ階層も必須。ワイルドカード指定不可
                    // ディレクトリ指定の場合もファイル指定と同様
                    // 存在しないファイルやディレクトリを指定した場合、IntelliJ に反映されない。
                    mapping["gradlew.bat"] = "windows-31j"
                }
            }
        }
    }
}

task blancoDb {
    group "blanco"
    description "Generate source code by blancoDB"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/db")
        // blancodb Ant タスクを定義
        ant.taskdef(
                name: "blancoDb",
                classname: "blanco.db.task.BlancoDbTask",
                // 依存設定を参照
                classpath: configurations.blancoDb.asPath
        )
        // サブディレクトリも処理する
        file(blancoDbMetaDir).traverse(
                // ディレクトリを対象とする
                type: FileType.DIRECTORIES,
                // 指定したディレクトリも対象に含める
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            // blancodb Ant タスクを実行
            ant.blancoDb(
                    // 定義書解析エラー時に処理を中止する
                    failonerror: true,
                    // 詳細なログ出力
                    // 「gradlew blancoDb --debug」で実行すると、
                    // "[ant:blancodb]"を含む行にログが出力される。
                    verbose: true,
                    // JDBC ドライバのクラスを指定する（必須）
                    jdbcdriver: "com.mysql.cj.jdbc.Driver",
                    // JDBC 接続先 URL を指定する（必須）
                    jdbcurl: blancoDbJdbcUrl,
                    // JDBC 接続時のユーザ名を指定する（必須）
                    jdbcuser: blancoDbJdbcUser,
                    // JDBC 接続時のパスワードを指定する（必須）
                    // パスワード無しの設定を行う場合は、"" （空文字）を指定する。
                    jdbcpassword: blancoDbJdbcPassword,
                    // SQL 定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                    metadir: metaDir,
                    // 作業用ディレクトリ
                    tmpdir: file("build/tmp/blanco"),
                    // 自動生成ファイル格納先ベースディレクトリ
                    targetdir: file("blanco-src"),
                    // 自動生成クラスのデフォルトパッケージ
                    basepackage: "${project.group}.blanco.db.common",
                    // blancoDB のランタイムパッケージ（共通処理）
                    //runtimepackage: "${basePackage}.blanco.db.runtime",
                    // Oracle DB の場合にスキーマを指定する
                    //schema: "app",
                    // DB のメタ情報を元に、テーブル単位でアクセスする、ソースコードを自動生成する
                    // MySQL の場合は、エラーとなる。
                    table: false,
                    // SQL 定義書を元にソースコードを自動生成する
                    sql: true,
                    // ログモードを指定する。debug, performance, sqlid のいずれかを指定する。
                    logmode: "debug",
                    // Statement のタイムアウト値を指定する。SQL 実行時のタイムアウト設定を行える。
                    //statementtimeout: 0,
                    // 自動生成時に SQL を実行するかどうかを指定する。「iterator」は、検索型のみ実行。「none」は、実行しない。
                    executesql: "iterator",
                    // 自動生成ソースコードのエンコーディングを指定する
                    encoding: "UTF-8",
                    // 定義書メタファイルから中間 XML ファイルへの変換を、キャッシュで済ますかどうかを指定する
                    //cache: false
                    // 出力先フォルダの書式を指定する
                    // blanco: [targetdir]/main
                    // maven: [targetdir]/main/java
                    // free: [targetdir](targetdir が無指定の場合は blanco/main)
                    targetStyle: "maven",
                    // 自動生成ソースコードの改行文字を指定する
                    lineSeparator: "LF"
            )
        }
        // blanco DB の Row クラスに @Introspected アノテーションを追記する
        modifyBlancoDBRowClasses()
    }
}

/**
 * blanco DB の Row クラスに @Introspected アノテーションを追加する
 */
void modifyBlancoDBRowClasses() {
    println("BlancoDB の Row クラスに @Introspected アノテーションを追加")
    sourceSets.main.java.srcDirs()
            .findAll { it.name.endsWith("Row.java") }
            .each { File file ->
                String source = file.getText("UTF-8")
                if (!source.contains("@io.micronaut.core.annotation.Introspected")) {
                    // 未処理ファイルの場合
                    // @Introspected アノテーションを追記
                    String modified = source.replace(
                            "public class ",
                            "@io.micronaut.core.annotation.Introspected\npublic class "
                    )
                    file.write(modified, "UTF-8")
                    println("更新: [$file]")
                }
            }
}

task blancoValueObjectKt {
    group "blanco"
    description "Generate value object for Kotlin by blancoValueObjectKt"
    doFirst {
        mkdir("build/tmp/blanco/valueobjectkt")
        ant.taskdef(
                name: "blancoValueObjectKt",
                classname: "blanco.valueobjectkt.task.BlancoValueObjectKtTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        file("${projectDir}/" + getProperty("blancoValueObjectMetaDir")).traverse(
                type: FileType.DIRECTORIES,
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoValueObjectKt(
                    metadir: metaDir,
                    targetdir: file("blanco-src"),
                    tmpdir: file("build/tmp/blanco"),
                    encoding: "UTF-8",
                    xmlrootelement: false,
                    sheetType: "php",
                    targetStyle: "maven",
                    lineSeparator: "LF",
                    packageSuffix: "blanco",
                    verbose: true
            )
        }
    }
}

task blancoRestGeneratorKt {
    dependsOn "blancoValueObjectKt"
    group "blanco"
    description "Generate REST source for Kotlin by blancoRestGeneratorKt"
    doFirst {
        // Create a working directory
        mkdir("build/tmp/blanco/restgenerator")
        // Define Ant task
        ant.taskdef(
                name: "blancoRestGeneratorKt",
                classname: "blanco.restgeneratorkt.task.BlancoRestGeneratorKtTask",
                classpath: configurations.blancoRestGeneratorKt.asPath
        )
        // Handle subdirectories
        file(blancoRestGeneratorMetaDir).traverse(
                type: FileType.DIRECTORIES,
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoRestGeneratorKt(
                    // REST definition file directory
                    metadir: metaDir,
                    // Base directory for auto-generated files
                    targetdir: file("blanco-src"),
                    // Working directory
                    tmpdir: file("build/tmp/blanco"),
                    // Flag to transform the name of a field or method
                    nameAdjust: true,
                    // Encoding of auto-generated source code
                    encoding: "UTF-8",
                    // Flag to output annotations for XML root elements
                    xmlrootelement: false,
                    // programming languages that the meta definition document expects
                    sheetType: "php",
                    // Format of output folder
                    // blanco: [targetdir]/main<br>
                    // maven: [targetdir]/main/java<br>
                    // free: [targetdir](targetdirが無指定の場合はblanco/main)
                    targetStyle: "maven",
                    // Newline characters in auto-generated source code
                    lineSeparator: "LF",
                    // Client generation
                    client: false,
                    // Describe the server framework
                    serverType: "micronaut",
                    basepackage: "blanco.restgenerator",
                    telegrampackage: "blanco.restgenerator.valueobject",
                    // Name to add to the end of the package name（In this case, add .blanco）
                    packageSuffix: "blanco",
                    // Describe the end of the package name of the value object
                    voPackageSuffix: "blanco"
            )
        }
    }
}

task generateTelegrams {
    group "blanco"
    description "Generate telegram value object for Kotlin"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/telegrams/valueobjectkt")
        // blancoValueObjectKt Ant タスクを定義
        ant.taskdef(
                name: "blancoValueObjectKt",
                classname: "blanco.valueobjectkt.task.BlancoValueObjectKtTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        // サブディレクトリも処理する
        file("${projectDir}/" + getProperty("telegramsMetaDir")).traverse(
                // ディレクトリを対象とする
                type: FileType.DIRECTORIES,
                // 指定したディレクトリも対象に含める
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoValueObjectKt(
                    // ValueObject定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                    metadir: metaDir,
                    // 自動生成ファイル格納先ベースディレクトリ
                    targetdir: file("blanco-src"),
                    // 作業用ディレクトリ
                    tmpdir: file("build/tmp/blanco/telegrams"),
                    // 自動生成ソースコードのエンコーディング指定
                    encoding: "UTF-8",
                    // XML ルート要素のアノテーションを出力するフラグ
                    xmlrootelement: false,
                    // meta 定義書が期待しているプログラミング言語を指定
                    sheetType: "php",
                    // 出力先フォルダの書式を指定
                    // blanco: [targetdir]/main<br>
                    // maven: [targetdir]/main/java<br>
                    // free: [targetdir](targetdirが無指定の場合はblanco/main)
                    targetStyle: "maven",
                    // 自動生成ソースコードの改行文字を指定する
                    lineSeparator: "LF",
                    // パッケージ名の末尾に追加する名称
                    packageSuffix: "",
                    // 詳細ログを出力する
                    verbose: true
            )
        }
        // サブディレクトリも処理する
        file("${projectDir}/" + getProperty("telegramsKtMetaDir")).traverse(
                // ディレクトリを対象とする
                type: FileType.DIRECTORIES,
                // 指定したディレクトリも対象に含める
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoValueObjectKt(
                    // ValueObject定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                    metadir: metaDir,
                    // 自動生成ファイル格納先ベースディレクトリ
                    targetdir: file("blanco-src"),
                    // 作業用ディレクトリ
                    tmpdir: file("build/tmp/blanco/telegrams"),
                    // 自動生成ソースコードのエンコーディング指定
                    encoding: "UTF-8",
                    // XML ルート要素のアノテーションを出力するフラグ
                    xmlrootelement: false,
                    // meta 定義書が期待しているプログラミング言語を指定
                    sheetType: "php",
                    // 出力先フォルダの書式を指定
                    // blanco: [targetdir]/main<br>
                    // maven: [targetdir]/main/java<br>
                    // free: [targetdir](targetdirが無指定の場合はblanco/main)
                    targetStyle: "maven",
                    // 自動生成ソースコードの改行文字を指定する
                    lineSeparator: "LF",
                    // パッケージ名の末尾に追加する名称
                    packageSuffix: "",
                    // 詳細ログを出力する
                    verbose: true
            )
        }
    }
}

task blancoResourceBundle {
    group "blanco"
    description "Generate resource bundle by blancoResourceBundle"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/resourcebundle")
        // blancoResourceBundle Ant タスクを定義
        ant.taskdef(
                name: "blancoResourceBundle",
                classname: "blanco.resourcebundle.task.BlancoResourceBundleTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        // サブディレクトリも処理する
//        file(blancoResourceBundleMetaDir).traverse(
//            // ディレクトリを対象とする
//            type: FileType.DIRECTORIES,
//            // 指定したディレクトリも対象に含める
//            visitRoot: true
//        ) { metaDir ->
        println("metaDir: $blancoResourceBundleMetaDir")
        ant.blancoResourceBundle(
                // リソースバンドル定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                metadir: blancoResourceBundleMetaDir,
                // 自動生成ファイル格納先ベースディレクトリ
                targetdir: file("blanco-src"),
                // 作業用ディレクトリ
                tmpdir: file("build/tmp/blanco"),
                // 自動生成ソースコードのエンコーディング指定
                encoding: "UTF-8",
                // プロパティファイルの生成時刻を、プロパティファイルのコメントに出力するフラグ
                commenttimestamp: false,
                // リソースバンドル文字列をMessageFormatによるパースを行った際に、
                // 例外が発生したら処理を中断するかどうかのフラグ。
                // true なら処理中断して例外を発生させます。
                // false なら処理続行し、置換文字列は無いものとみなします。
                // Java のソースコードを処理する際などに、
                // あえて false に設定して波括弧を扱うことができるように切り替える場合があります。
                failonmessageformaterror: true,
                // プロパティファイルをディレクトリ付きで出力するフラグ
                propertieswithdirectory: true,
                // 出力先フォルダの書式を指定する
                // blanco: [targetdir]/main
                // maven: [targetdir]/main/java
                // free: [targetdir](targetdir が無指定の場合は blanco/main)
                targetStyle: "maven",
                // 自動生成ソースコードの改行文字を指定する
                lineSeparator: "LF"
        )
//        }
    }
}

task blancoResponseMetaInfoVO {
    group "blanco"
    description "Generate resource constants by blancoValueObject"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/metainfo/valueobject")
        // blancoConstants Ant タスクを定義
        ant.taskdef(
                name: "blancoConstants",
                classname: "blanco.valueobject.task.BlancoValueObjectTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        // サブディレクトリも処理する
//        file(blancoConstantsMetaDir).traverse(
//            // ディレクトリを対象とする
//            type: FileType.DIRECTORIES,
//            // 指定したディレクトリも対象に含める
//            visitRoot: true
//        ) { metaDir ->
        println("metaDir: $blancoConstantsMetaDir")
        ant.blancoConstants(
                // リソースバンドル定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                metadir: blancoConstantsMetaDir,
                // 自動生成ファイル格納先ベースディレクトリ
                targetdir: file("blanco-src"),
                // 作業用ディレクトリ
                tmpdir: file("build/tmp/blanco/metainfo"),
                // 自動生成ソースコードのエンコーディング指定
                encoding: "UTF-8",
                targetStyle: "maven",
                lineSeparator: "LF"
        )
//        }
    }
}

task blancoResponseMetaInfo {
    dependsOn "blancoResponseMetaInfoVO"
    group "blanco"
    description "Generate ResponseMetaInfo constants by blancoConstatns"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/metainfo/constants")
        // blancoConstants Ant タスクを定義
        ant.taskdef(
                name: "blancoConstants",
                classname: "blanco.constants.task.BlancoConstantsTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        // サブディレクトリも処理する
//        file(blancoConstantsMetaDir).traverse(
//            // ディレクトリを対象とする
//            type: FileType.DIRECTORIES,
//            // 指定したディレクトリも対象に含める
//            visitRoot: true
//        ) { metaDir ->
        println("metaDir: $blancoConstantsMetaDir")
        ant.blancoConstants(
                // リソースバンドル定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                metadir: blancoConstantsMetaDir,
                // 自動生成ファイル格納先ベースディレクトリ
                targetdir: file("blanco-src"),
                // 作業用ディレクトリ
                tmpdir: file("build/tmp/blanco/metainfo"),
                // 自動生成ソースコードのエンコーディング指定
                encoding: "UTF-8",
                // 出力先フォルダの書式を指定する
                // blanco: [targetdir]/main
                // maven: [targetdir]/main/java
                // free: [targetdir](targetdir が無指定の場合は blanco/main)
                targetStyle: "maven",
                // 自動生成ソースコードの改行文字を指定する
                lineSeparator: "LF"
        )
//        }
    }
}

task meta(type: GradleBuild) {
    group "blanco"
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ["blancoDb", "blancoValueObjectKt", "generateTelegrams","blancoRestGeneratorKt","blancoResourceBundle","blancoResponseMetaInfo"]
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}

task sourcesJar(type: Jar) {
    duplicatesStrategy = 'include'
    archiveClassifier.convention('sources')
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

java {
    // 成果物にソースコードを含める
    withSourcesJar()
    // 成果物に Javadoc を含める
    withJavadocJar()
}

// パッケージ公開設定
def getMavenSettingsCredentials = {
    String userHome = System.getProperty( "user.home" );
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()
    for (entry in entries) {
        if ( entry."id".text() == "github" ) {
            return [username: entry.username.text(), password: entry.password.text()]
        }
    }
}

publishing {
    publications {
        target(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            url GHPagesMaven
        }
    }
}

def publishToGhPages() {
    def grgit = Grgit.open(dir: GHPagesMaven)
    grgit.add(patterns: ['.'], update: true) // add updated and deleted
    grgit.add(patterns: ['.']) // add new
    grgit.commit(message: 'Publish dapanda-api-core version ' + '${version}')
    grgit.push()
}

task pubPush {
    dependsOn "publish"
    doFirst {
        def creds = getCredentials()
        environment 'GRGIT_USER', creds['password']
        publishToGhPages()
    }
}
