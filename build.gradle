import groovy.io.FileType

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.6.20"
    id("org.jetbrains.kotlin.kapt") version "1.6.20"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.6.10"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.3.2"
}

version = "0.0.1"
// プロジェクトグループ
group project.name.replace("-", ".")
// group = "emulator"

repositories {
    mavenLocal()
    maven {
        url 'https://raw.github.com/uedaueo/blancofw-maven2/gh-pages-poi5/'
    }
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs += "blanco-src/main/java"
        }
        kotlin {
            srcDirs += "blanco-src/main/kotlin"
        }
        resources {
            srcDirs += "blanco-src/main/java"
        }
    }
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("dapanda.api.*")
    }
}

configurations {
    blancoDb
    blancoRestGeneratorKt
    blancoFramework
}

dependencies {
    kapt('io.micronaut:micronaut-http-validation')
    kapt('io.micronaut:micronaut-inject-java')
    implementation('io.micronaut:micronaut-http-server-netty')
    implementation('io.micronaut:micronaut-http-client')
    implementation('io.micronaut:micronaut-runtime')
    implementation('io.micronaut.kotlin:micronaut-kotlin-runtime')
    implementation('javax.annotation:javax.annotation-api')
    runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    runtimeOnly('ch.qos.logback:logback-classic')
    compileOnly('org.graalvm.nativeimage:svm')
    implementation('io.micronaut:micronaut-validation')
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    runtimeOnly('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'

    blancoDb "mysql:mysql-connector-java:${mysqlJdbcVersion}"
    blancoDb "blanco.db:blanco-db:[2.0,3.0)"
    blancoFramework "blanco.valueobjectkt:blanco-valueobjectkt:[0.0,1.0)"
    blancoRestGeneratorKt "blanco.restgeneratorkt:blanco-restgeneratorkt:[0.0,1.0)"

    implementation "mysql:mysql-connector-java:${mysqlJdbcVersion}"
}


application {
    mainClass.set("dapanda.api.common.application.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

task blancoDb {
    group "blanco"
    description "Generate source code by blancoDB"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/db")
        // blancodb Ant タスクを定義
        ant.taskdef(
                name: "blancoDb",
                classname: "blanco.db.task.BlancoDbTask",
                // 依存設定を参照
                classpath: configurations.blancoDb.asPath
        )
        // サブディレクトリも処理する
        file(blancoDbMetaDir).traverse(
                // ディレクトリを対象とする
                type: FileType.DIRECTORIES,
                // 指定したディレクトリも対象に含める
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            // blancodb Ant タスクを実行
            ant.blancoDb(
                    // 定義書解析エラー時に処理を中止する
                    failonerror: true,
                    // 詳細なログ出力
                    // 「gradlew blancoDb --debug」で実行すると、
                    // "[ant:blancodb]"を含む行にログが出力される。
                    verbose: true,
                    // JDBC ドライバのクラスを指定する（必須）
                    jdbcdriver: "com.mysql.cj.jdbc.Driver",
                    // JDBC 接続先 URL を指定する（必須）
                    jdbcurl: blancoDbJdbcUrl,
                    // JDBC 接続時のユーザ名を指定する（必須）
                    jdbcuser: blancoDbJdbcUser,
                    // JDBC 接続時のパスワードを指定する（必須）
                    // パスワード無しの設定を行う場合は、"" （空文字）を指定する。
                    jdbcpassword: blancoDbJdbcPassword,
                    // SQL 定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                    metadir: metaDir,
                    // 作業用ディレクトリ
                    tmpdir: file("build/tmp/blanco"),
                    // 自動生成ファイル格納先ベースディレクトリ
                    targetdir: file("blanco-src"),
                    // 自動生成クラスのデフォルトパッケージ
                    basepackage: "${project.group}.blanco.db.common",
                    // blancoDB のランタイムパッケージ（共通処理）
                    //runtimepackage: "${basePackage}.blanco.db.runtime",
                    // Oracle DB の場合にスキーマを指定する
                    //schema: "app",
                    // DB のメタ情報を元に、テーブル単位でアクセスする、ソースコードを自動生成する
                    // MySQL の場合は、エラーとなる。
                    table: false,
                    // SQL 定義書を元にソースコードを自動生成する
                    sql: true,
                    // ログモードを指定する。debug, performance, sqlid のいずれかを指定する。
                    logmode: "debug",
                    // Statement のタイムアウト値を指定する。SQL 実行時のタイムアウト設定を行える。
                    //statementtimeout: 0,
                    // 自動生成時に SQL を実行するかどうかを指定する。「iterator」は、検索型のみ実行。「none」は、実行しない。
                    executesql: "iterator",
                    // 自動生成ソースコードのエンコーディングを指定する
                    encoding: "UTF-8",
                    // 定義書メタファイルから中間 XML ファイルへの変換を、キャッシュで済ますかどうかを指定する
                    //cache: false
                    // 出力先フォルダの書式を指定する
                    // blanco: [targetdir]/main
                    // maven: [targetdir]/main/java
                    // free: [targetdir](targetdir が無指定の場合は blanco/main)
                    targetStyle: "maven",
                    // 自動生成ソースコードの改行文字を指定する
                    lineSeparator: "LF"
            )
        }
        // blanco DB の Row クラスに @Introspected アノテーションを追記する
        modifyBlancoDBRowClasses()
    }
}

/**
 * blanco DB の Row クラスに @Introspected アノテーションを追加する
 */
void modifyBlancoDBRowClasses() {
    println("BlancoDB の Row クラスに @Introspected アノテーションを追加")
    sourceSets.main.java.srcDirs()
            .findAll { it.name.endsWith("Row.java") }
            .each { File file ->
                String source = file.getText("UTF-8")
                if (!source.contains("@io.micronaut.core.annotation.Introspected")) {
                    // 未処理ファイルの場合
                    // @Introspected アノテーションを追記
                    String modified = source.replace(
                            "public class ",
                            "@io.micronaut.core.annotation.Introspected\npublic class "
                    )
                    file.write(modified, "UTF-8")
                    println("更新: [$file]")
                }
            }
}

task blancoValueObjectKt {
    group "blanco"
    description "Generate value object for Kotlin by blancoValueObjectKt"
    doFirst {
        mkdir("build/tmp/blanco/valueobjectkt")
        ant.taskdef(
                name: "blancoValueObjectKt",
                classname: "blanco.valueobjectkt.task.BlancoValueObjectKtTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        file("${projectDir}/" + getProperty("blancoValueObjectMetaDir")).traverse(
                type: FileType.DIRECTORIES,
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoValueObjectKt(
                    metadir: metaDir,
                    targetdir: file("blanco-src"),
                    tmpdir: file("build/tmp/blanco"),
                    encoding: "UTF-8",
                    xmlrootelement: false,
                    sheetType: "php",
                    targetStyle: "maven",
                    lineSeparator: "LF",
                    packageSuffix: "blanco",
                    verbose: true
            )
        }
    }
}

task blancoRestGeneratorKt {
    dependsOn "blancoValueObjectKt"
    group "blanco"
    description "Generate REST source for Kotlin by blancoRestGeneratorKt"
    doFirst {
        // Create a working directory
        mkdir("build/tmp/blanco/restgenerator")
        // Define Ant task
        ant.taskdef(
                name: "blancoRestGeneratorKt",
                classname: "blanco.restgeneratorkt.task.BlancoRestGeneratorKtTask",
                classpath: configurations.blancoRestGeneratorKt.asPath
        )
        // Handle subdirectories
        file(blancoRestGeneratorMetaDir).traverse(
                type: FileType.DIRECTORIES,
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoRestGeneratorKt(
                    // REST definition file directory
                    metadir: metaDir,
                    // Base directory for auto-generated files
                    targetdir: file("blanco-src"),
                    // Working directory
                    tmpdir: file("build/tmp/blanco"),
                    // Flag to transform the name of a field or method
                    nameAdjust: true,
                    // Encoding of auto-generated source code
                    encoding: "UTF-8",
                    // Flag to output annotations for XML root elements
                    xmlrootelement: false,
                    // programming languages that the meta definition document expects
                    sheetType: "php",
                    // Format of output folder
                    // blanco: [targetdir]/main<br>
                    // maven: [targetdir]/main/java<br>
                    // free: [targetdir](targetdirが無指定の場合はblanco/main)
                    targetStyle: "maven",
                    // Newline characters in auto-generated source code
                    lineSeparator: "LF",
                    // Client generation
                    client: false,
                    // Describe the server framework
                    serverType: "micronaut",
                    basepackage: "blanco.restgenerator",
                    telegrampackage: "blanco.restgenerator.valueobject",
                    // Name to add to the end of the package name（In this case, add .blanco）
                    packageSuffix: "blanco",
                    // Describe the end of the package name of the value object
                    voPackageSuffix: "blanco"
            )
        }
    }
}

task generateTelegrams {
    group "blanco"
    description "Generate telegram value object for Kotlin"
    doFirst {
        // 作業用ディレクトリを作成
        mkdir("build/tmp/blanco/telegrams/valueobjectkt")
        // blancoValueObjectKt Ant タスクを定義
        ant.taskdef(
                name: "blancoValueObjectKt",
                classname: "blanco.valueobjectkt.task.BlancoValueObjectKtTask",
                // 依存設定を参照
                classpath: configurations.blancoFramework.asPath
        )
        // サブディレクトリも処理する
        file("${projectDir}/" + getProperty("telegramsMetaDir")).traverse(
                // ディレクトリを対象とする
                type: FileType.DIRECTORIES,
                // 指定したディレクトリも対象に含める
                visitRoot: true
        ) { metaDir ->
            println("metaDir: $metaDir")
            ant.blancoValueObjectKt(
                    // ValueObject定義ファイル格納ディレクトリ（ファイル名はマルチバイトでも問題なし）
                    metadir: metaDir,
                    // 自動生成ファイル格納先ベースディレクトリ
                    targetdir: file("blanco-src"),
                    // 作業用ディレクトリ
                    tmpdir: file("build/tmp/blanco/telegrams"),
                    // 自動生成ソースコードのエンコーディング指定
                    encoding: "UTF-8",
                    // XML ルート要素のアノテーションを出力するフラグ
                    xmlrootelement: false,
                    // meta 定義書が期待しているプログラミング言語を指定
                    sheetType: "php",
                    // 出力先フォルダの書式を指定
                    // blanco: [targetdir]/main<br>
                    // maven: [targetdir]/main/java<br>
                    // free: [targetdir](targetdirが無指定の場合はblanco/main)
                    targetStyle: "maven",
                    // 自動生成ソースコードの改行文字を指定する
                    lineSeparator: "LF",
                    // パッケージ名の末尾に追加する名称
                    packageSuffix: "",
                    // 詳細ログを出力する
                    verbose: true
            )
        }
    }
}

task meta(type: GradleBuild) {
    group "blanco"
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ["blancoDb", "blancoValueObjectKt", "generateTelegrams","blancoRestGeneratorKt"]
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}
